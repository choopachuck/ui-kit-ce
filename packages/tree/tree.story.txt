import { Meta, Story, ArgsTable, Canvas, Source } from '@storybook/addon-docs'
import { Tree } from '@v-uik/tree'
import {
  createTitle,
  COMPONENTS,
  createStory,
} from '../../docs/showroom/config'

import {
  TreeCanvas,
  TreeBase,
  TreeSizes,
  TreeDisabledFull,
  TreeDisabledPartial,
  TreeBaseNoExpand,
  TreeLevelSpacer,
  TreeWithHalfLevelSpacer,
} from './examples'

import RawCanvas from '!!raw-loader!@v-uik/tree/examples/Canvas'
import RawTreeBase from '!!raw-loader!@v-uik/tree/examples/TreeBase'
import RawTreeSizes from '!!raw-loader!@v-uik/tree/examples/TreeSizes'
import RawTreeDisabledFull from '!!raw-loader!@v-uik/tree/examples/TreeDisabledFull'
import RawTreeDisabledPartial from '!!raw-loader!@v-uik/tree/examples/TreeDisabledPartial'
import RawTreeBaseNoExpand from '!!raw-loader!@v-uik/tree/examples/TreeBaseNoExpand'
import RawTreeLevelSpacer from '!!raw-loader!@v-uik/tree/examples/TreeLevelSpacer'
import RawTreeWithHalfLevelSpacer from '!!raw-loader!@v-uik/tree/examples/TreeWithHalfLevelSpacer'

export const story = createStory(TreeCanvas, RawCanvas)

<Meta
  title={createTitle([COMPONENTS.dataDisplay, 'Tree', 'Tree'])}
  component={Tree}
/>

<Story
  name="Tree"
  parameters={{
    ...story.parameters,
    controls: {
      disable: true,
    },
    docs: { disable: true },
  }}
>
  {story.component}
</Story>

# Tree

Сворачиваемая иерархическая структура в виде дерева, которая помогает организовать вложенные уровни навигации.

## import

```ts
import { Tree } from '@v-uik/base'
```

или

```ts
import { Tree } from '@v-uik/tree'
```

## Базовое использование

Ниже представлен пример базового использования компонента с указанием источника данных

<Canvas withSource="none">
  <TreeBase />
</Canvas>

<Source language="tsx" code={RawTreeBase} />

## Базовый функционал

### Размеры дерева

Компонент `Tree` позволяет устанавливать заранее заданный размер через свойство size.
В зависимости от этого значения изменяется размер элементов. Доступны следующие размеры:

| Значение        | Описание               |
| --------------- | ---------------------- |
| <code>xs</code> | Очень маленький размер |
| <code>sm</code> | Маленький размер       |
| <code>md</code> | Средний размер         |

По умолчанию дерево имеет размер `md`

<Canvas withSource="none">
  <TreeSizes />
</Canvas>

<Source language="tsx" code={RawTreeSizes} />

### Блокировка таблицы

#### Полная блокировка

Чтобы полностью заблокировать дерево и отключить его функции, нужно установить значение `true` в свойство `disabled`.

<Canvas withSource="none">
  <TreeDisabledFull />
</Canvas>

<Source language="tsx" code={RawTreeDisabledFull} />

#### Выборочная блокировка

Чтобы частично заблокировать отдельные элементы дерева, нужно установить значение `true` в свойство `disabled`
для нужного элемента в массиве данных dataSource.

<Canvas withSource="none">
  <TreeDisabledPartial />
</Canvas>

<Source language="tsx" code={RawTreeDisabledPartial} />

### Пользовательский отступ

Чтобы задать пользовательский отступ относительно уровней вложенности элементов дерева,
нужно указать числовое значение в свойстве `levelSpacer`. Если значение не задано,
отступ будет автоматически рассчитан по умолчанию с использованием следующей формулы:<br/>

`24 + 4 * 2`, где

- 24 - базовый размер элементов управления;
- 4 - отступ слева и справа между компонентами внутри элемента дерева.

<Canvas withSource="none">
  <TreeLevelSpacer />
</Canvas>

<Source language="tsx" code={RawTreeLevelSpacer} />{' '}

### Половинный отступ

Компонент поддерживает половинный отступ относительно уровня вложенности элементов дерева.
Чтобы включить эту функцию, нужно установить значение `true` в свойство `withHalfLevelSpacer`.
В этом случае отступ будет рассчитываться следующим образом:

В случае, когда задано значение в свойстве `levelSpacer`:

`levelSpacer / 2`, где

- `levelSpacer` - пользовательский базовый отступ.

Либо в случае, когда значение в свойстве `levelSpacer` отсутствует:

`(24 + 4 * 2) / 2`, где

- 24 - базовый размер элементов управления;
- 4 - отступ слева и справа между компонентами внутри элемента дерева.

<Canvas withSource="none">
  <TreeWithHalfLevelSpacer />
</Canvas>

<Source language="tsx" code={RawTreeWithHalfLevelSpacer} />{' '}

### Половинный отступ

## Функционал скрытия/раскрытия элементов

### Отключение

Чтобы отключить функциональность скрытия/раскрытия элементов дерева и убрать видимость соответствующих кнопок,
необходимо передать значение `true` в свойство `disableExpand`

<Canvas withSource="none">
  <div>show code</div>
  <TreeBaseNoExpand />
</Canvas>

<Source language="tsx" code={RawTreeBaseNoExpand} />
