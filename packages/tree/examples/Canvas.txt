import * as React from 'react'
import {
  Tree,
  useTree,
  UseTreeReturnProps,
  TreeNodeCheckboxProps,
} from '@v-uik/tree'
import { Checkbox as UikCheckbox } from '@v-uik/checkbox'
import { Input, isEqualKeyboardKeys, Dropdown } from '@v-uik/base'
import { TreeImperativeHandlersRef } from '../dist/esm/types'

const checkboxClasses = {
  indeterminate: 'indeterminate',
  checked: 'checked',
}

const Checkbox = (props: TreeNodeCheckboxProps) => {
  return <UikCheckbox {...props} classes={checkboxClasses} />
}

const items2 = [
  {
    key: 555,
    custom: 'custom-item-0',
    label: undefined,
    children: [
      {
        key: 'item-0-1',
        custom: 'custom-item-0-1',
        label: 'item-0-1',
        children: [
          {
            key: 'item-0-1-1',
            custom: 'custom-item-0-1-1',
            label: 'item-0-1-1',
          },
          {
            key: 'item-0-1-2',
            custom: 'custom-item-0-1-2',
            label: 'item-0-1-2',
            children: [
              {
                key: 'item-0-1-2-1',
                custom: 'custom-item-0-1-2-1',
                label: 'item-0-1-2-1',
                children: [
                  {
                    key: 'item-0-1-2-1-1',
                    //disabled: true,
                    custom: 'custom-item-0-1-2-1-1',
                    label: 'item-0-1-2-1-1',
                  },
                  {
                    key: 'item-0-1-2-1-2',
                    custom: 'custom-item-0-1-2-1-2',
                    label: 'item-0-1-2-1-2',
                  },
                ],
              },
              {
                key: 'item-0-1-2-2',
                custom: 'custom-item-0-1-2-2',
                label: 'item-0-1-2-2',
                children: [
                  {
                    key: 'item-0-1-2-2-1',
                    custom: 'custom-item-0-1-2-2-1',
                    label: 'item-0-1-2-2-1',
                  },
                  {
                    key: 'item-0-1-2-2-2',
                    custom: 'custom-item-0-1-2-2-2',
                    label: 'item-0-1-2-2-2',
                  },
                ],
              },
              {
                key: 'item-0-1-2-3',
                custom: 'custom-item-0-1-2-3',
                label: 'item-0-1-2-3',
                children: [
                  {
                    key: 'item-0-1-2-3-1',
                    custom: 'custom-item-0-1-2-3-1',
                    label: 'item-0-1-2-3-1',
                  },
                  {
                    key: 'item-0-1-2-3-2',
                    custom: 'custom-item-0-1-2-3-2',
                    label: 'item-0-1-2-3-2',
                  },
                ],
              },
            ],
          },
          {
            key: 'item-0-1-3',
            custom: 'custom-item-0-1-3',
            label: 'item-0-1-3',
          },
          {
            key: 'item-0-1-4',
            custom: 'custom-item-0-1-4',
            label: 'item-0-1-4',
          },
        ],
      },
      {
        key: 'item-0-2',
        //checkDisabled: true,
        custom: 'custom-item-0-2',
        label: 'item-0-2',
        children: [
          {
            key: 'item-0-2-1',
            custom: 'custom-item-0-2-1',
            label: 'item-0-2-1',
          },
        ],
      },
      {
        key: 'item-0-3',
        custom: 'custom-item-0-3',
        label: 'item-0-3',
      },
    ],
  },
  {
    key: 'item-1',
    //disabled: true,
    custom: 'custom-item-1',
    label: 'item-1',
    children: [
      {
        key: 'item-1-0',
        label: 'item-1-0',
        children: [
          {
            key: 'item-1-0-0',
            label: 'item-1-0-0',
          },
        ],
      },
      {
        key: 'item-1-1',
        custom: 'custom-item-1-1',
        label: 'item-1-1',
      },
      {
        key: 'item-1-2',
        custom: 'custom-item-1-2',
        label: 'item-1-2',
        children: [
          {
            key: 'item-1-2-0',
            label: 'item-1-2-0',
          },
          {
            key: 'item-1-2-1',
            label: 'item-1-2-1',
            children: [
              {
                key: 'item-1-1-2-1',
                label: 'item-1-1-2-1',
                disabled: true,
                children: [
                  {
                    key: 'item-1-1-2-1-0',
                    label: 'item-1-1-2-1-0',
                  },
                  {
                    key: 'item-1-1-2-1-1',
                    label: 'item-1-1-2-1-1',
                  },
                ],
              },
              {
                key: 'item-1-1-2-2',
                label: 'item-1-1-2-2',
                children: [
                  {
                    key: 'item-1-1-2-2-1',
                    label: 'item-1-1-2-2-1',
                  },
                  {
                    key: 'item-1-1-2-2-2',
                    label: 'item-1-1-2-2-2',
                  },
                ],
              },
              {
                key: 'item-1-1-2-3',
                label: 'item-1-1-2-3',
                children: [
                  {
                    key: 'item-1-1-2-3-1',
                    label: 'item-1-1-2-3-1',
                  },
                  {
                    key: 'item-1-1-2-3-2',
                    label: 'item-1-1-2-3-2',
                  },
                ],
              },
            ],
          },
          {
            key: 'item-1-1-3',
            label: 'item-1-1-3',
          },
          {
            key: 'item-1-1-4',
            label: 'item-1-1-4',
          },
        ],
      },
    ],
  },
  {
    key: 'item-3',
    label: 'item-3',
    children: [
      {
        key: 'item-3-0',
        custom: 'custom-item-3-0',
        label: 'item-3-0',
        children: [
          {
            key: 'item-3-0-0',
            label: 'item-item-3-0-0',
          },
          {
            key: 'item-item-3-0-1',
            label: 'item-item-3-0-1',
          },
        ],
      },
      {
        key: 'item-3-1',
        label: 'item-3-1',
        children: [
          {
            key: 'item-3-1-0',
            label: 'item-item-3-1-0',
          },
          {
            key: 'item-item-3-1-1',
            label: 'item-item-3-1-1',
          },
        ],
      },
    ],
  },
]
// const defaultExpandedKeys = [
//   'item-1',
//   'item-1-0',
//   'item-2-0',
//   'item-1-0-0',
//   'item-1-0-1',
//   'item-1-0-1-0',
//   'item-0',
//   'item-0-1',
// ]

// const defaultCheckedKeys = ['item-0-1', 'item-2-0']

// const useStyles = createUseStyles({
//   foo: {
//     width: 100,
//     height: 100,
//     border: '1px solid black',
//     '&:hover': {
//       background: 'blue',
//     },
//     '&:active': {
//       background: 'red',
//     },
//   },
// })

export default (): JSX.Element => {
  const [expandedKeys, setExpandedKeys] = React.useState<React.Key[]>([
    'custom-children-0',
  ])
  const [checkedKeys, setCheckedKeys] = React.useState<React.Key[]>([
    'custom-children-0-3',
  ])
  // const [selectedKeys, setSelectedKeys] = React.useState<React.Key[]>()

  // const classes = useStyles()

  // return (
  //   <span style={{ display: 'flex' }}><span style={{ display: 'flex' }} className={classes.foo} /></span>
  // )

  const ref = React.useRef<TreeImperativeHandlersRef | null>(null)

  const content = (
    <div style={{ background: '#fff', border: '1px solid black' }}>
      default
      <Tree
        //@ts-ignore
        ref={ref}
        checkable
        showIcons
        showTrails
        selectable
        disableFocusTreeOnItemClick
        checkedKeys={checkedKeys}
        tabIndex={-1}
        withHalfLevelSpacer={false}
        dataSource={items2}
        // onTreeKeyDown={(
        //   event,
        //   node,
        //   { toggleSelectRange, toggleCheck, toggleExpand, toggleSelect }
        // ) => {
        //   if (isEqualKeyboardKeys('Enter', event.key)) {
        //     return true
        //   }
        //   if (isEqualKeyboardKeys(' ', event.key)) {
        //     return true
        //   }
        // }}
        onNodeCheck={(checkedKeys) => setCheckedKeys(checkedKeys)}
      />
    </div>
  )

  const {
    tree,
    getIsChecked,
    getIsExpanded,
    getIsIndeterminate,
    toggleCheck,
    toggleExpand,
  } = useTree({
    dataSource: items2,
    defaultExpandedKeys: ['children-0'],
    defaultCheckedKeys: ['children-0-3', 'children-0-1-1', 'children-0-1-2-1'],
  })

  const renderTree = (tree: UseTreeReturnProps['tree']) =>
    tree.map((treeItem) => {
      const {
        $meta: { depth },
        label,
        children,
        key,
        disabled,
        checkDisabled,
      } = treeItem
      const isExpanded = getIsExpanded(key)

      return (
        <div key={key} style={{ display: 'flex', flexDirection: 'column' }}>
          <div
            key={key}
            style={{
              display: 'flex',
              flexDirection: 'row',
              padding: '4px 0px',
            }}
          >
            <div style={{ marginLeft: 51 * depth }} />
            <div style={{ width: 51 }}>
              {children?.length && (
                <button disabled={disabled} onClick={() => toggleExpand(key)}>
                  {isExpanded ? 'Close' : 'Open'}
                </button>
              )}
            </div>
            <input
              key={String(getIsIndeterminate(key))}
              ref={(el) => {
                if (el && getIsIndeterminate(key)) {
                  el.indeterminate = true
                }
              }}
              disabled={disabled || checkDisabled}
              type="checkbox"
              checked={getIsChecked(key)}
              onChange={() => toggleCheck(key)}
            />
            {label}
          </div>
          {children?.length && isExpanded && renderTree(children)}
        </div>
      )
    })

  return (
    <div>
      <div>
        <div style={{ display: 'flex', alignItems: 'top' }}>
          <div>
            custom
            {renderTree(tree)}
          </div>
          <div>
            default
            <Tree
              checkable
              showIcons
              showTrails
              selectable
              withHalfLevelSpacer
              components={{
                Checkbox,
              }}
              // checkedKeys={checkedKeys}
              defaultSelectedKeys={['item-0']}
              // levelSpacer={50}
              dataSource={items2}
              defaultCheckedKeys={[
                'item-0-1',
                'item-2-0',
                'item-1-0-0',
                'item-item-3-1-1',
                'item-1-2-1',
                'item-1-1-3',
                'item-1-1-2-3-1',
                'item-item-3-1-1',
              ]}
              defaultExpandedKeys={[
                'item-0',
                'item-1',
                'item-3',
                'item-0-1',
                'item-0-2',
                'item-0-3',
                'item-1-0',
                'item-1-1',
                'item-1-2',
                'item-3-0',
                'item-3-1',
                'item-0-1-1',
                'item-0-1-2',
                'item-0-1-3',
                'item-0-1-4',
                'item-0-2-1',
                'item-1-0-0',
                'item-1-2-0',
                'item-1-2-1',
                'item-1-1-3',
                'item-1-1-4',
                'item-3-0-0',
                'item-item-3-0-1',
                'item-3-1-0',
                'item-item-3-1-1',
                'item-0-1-2-1',
                'item-0-1-2-2',
                'item-0-1-2-3',
                'item-1-1-2-1',
                'item-1-1-2-2',
                'item-1-1-2-3',
                'item-0-1-2-1-1',
                'item-0-1-2-1-2',
                'item-0-1-2-2-1',
                'item-0-1-2-2-2',
                'item-0-1-2-3-1',
                'item-0-1-2-3-2',
                'item-1-1-2-1-0',
                'item-1-1-2-1-1',
                'item-1-1-2-2-1',
                'item-1-1-2-2-2',
                'item-1-1-2-3-1',
                'item-1-1-2-3-2',
                'item-1-1-4',
              ]}
              // onNodeCheck={(checkedKeys) => setCheckedKeys(checkedKeys)}
            />
          </div>
          {/* <div>
            override click
            <Tree
              checkable
              showIcons
              showTrails
              selectable
              checkedKeys={checkedKeys}
              expandedKeys={expandedKeys}
              withHalfLevelSpacer={false}
              dataSource={items2}
              onTreeKeyDown={(event, item, { toggleCheck }) => {
                if (isEqualKeyboardKeys('Enter', event.key)) {
                  event.preventDefault()
                  event.stopPropagation()

                  if (item.key) {
                    toggleCheck(item.$meta.id)
                  }

                  return true

                  //ref?.current?.(event as unknown as React.KeyboardEvent<HTMLUListElement>)
                }
              }}
              onNodeClick={(event, item, { toggleCheck }) => {
                event.preventDefault()
                event.stopPropagation()

                if (item.key) {
                  toggleCheck(item.$meta.id)
                }

                return true
              }}
              onNodeCheck={(checkedKeys) => setCheckedKeys(checkedKeys)}
              onNodeExpand={(expandedKeys) => setExpandedKeys(expandedKeys)}
            />
          </div>
          <div>
            uncontroled (with select directory)
            <Tree
              checkable
              selectable
              showIcons
              showTrails
              disableExpandOnClick
              defaultSelectedKeys={['custom-children-3-0']}
              //defaultCheckedKeys={['custom-children-0-1']}
              defaultExpandedKeys={[
                'custom-children-0',
                'custom-children-0-1',
                'custom-children-0-1-2',
                'custom-children-0-1-2-3',
                'custom-children-3-0-1',
                'custom-children-3-0',
              ]}
              withHalfLevelSpacer={false}
              dataSource={items2}
              selectMode="directory"
              onNodeClick={(...args) => {
                console.log('foo', ...args)
              }}
            />
          </div>
          <div>
            uncontroled (select default (strict))
            <Tree
              checkable
              showIcons
              showTrails
              selectable
              disableExpandOnClick
              checkedKeys={checkedKeys}
              expandedKeys={expandedKeys}
              withHalfLevelSpacer={false}
              dataSource={items2}
              onNodeCheck={(checkedKeys) => setCheckedKeys(checkedKeys)}
              onNodeExpand={(expandedKeys) => setExpandedKeys(expandedKeys)}
              onNodeClick={(...args) => {
                console.log('foo', ...args)
              }}
            />
          </div>
          <div>
            uncontroled (select disableFocusTreeOnItemClick)
            <Tree
              checkable
              showIcons
              showTrails
              selectable
              disableExpandOnClick
              disableFocusTreeOnItemClick
              checkedKeys={checkedKeys}
              expandedKeys={expandedKeys}
              withHalfLevelSpacer={false}
              dataSource={items2}
              onNodeCheck={(checkedKeys) => setCheckedKeys(checkedKeys)}
              onNodeExpand={(expandedKeys) => setExpandedKeys(expandedKeys)}
              onNodeClick={(...args) => {
                console.log('foo', ...args)
              }}
            />
          </div> */}
        </div>
      </div>
      <div style={{ display: 'inline-flex', flexDirection: 'column' }}>
        <Dropdown content={content} placement="right-end" action="click">
          <Input
            inputProps={{
              onKeyDown: (event) => {
                if (isEqualKeyboardKeys('Enter', event.key)) {
                  event.preventDefault()
                  event.stopPropagation()

                  const key = ref.current?.getFocusItem()?.$meta.id

                  if (key) {
                    ref.current?.toggleCheck(key)
                  }

                  return

                  //ref?.current?.(event as unknown as React.KeyboardEvent<HTMLUListElement>)
                }

                ref?.current?.handleKeyDown(
                  event as unknown as React.KeyboardEvent<HTMLUListElement>
                )
              },
            }}
          />
        </Dropdown>
        <Input />

        <div>
          multipleSelect
          <Tree
            checkable
            showIcons
            showTrails
            selectable
            multipleSelect
            checkedKeys={checkedKeys}
            expandedKeys={expandedKeys}
            withHalfLevelSpacer={false}
            dataSource={items2}
            onNodeCheck={(checkedKeys) => setCheckedKeys(checkedKeys)}
            onNodeExpand={(expandedKeys) => setExpandedKeys(expandedKeys)}
          />
        </div>
      </div>
    </div>
  )
}
